import string
import sys

VERBOSE = True

##### class ClassModel #####

class ClassModel:
  def __init__(self):
    self.wordList = {}
    self.wordTotal = 0
    self.smsTotal = 0
    self.smsSpam = 0
    self.smsHam = 0

  def wordInClass(self, word, c):
    self.wordTotal += 1

    if word not in self.wordList:
      wi = WordInfo()
      self.wordList[word] = wi

    if c == 'ham':
      self.wordList[word].incrementHam()
    else:
      self.wordList[word].incrementSpam()

##### class WordInfo #####

class WordInfo:
  def __init__(self):
    self.inSpam = 0
    self.inHam = 0

  def incrementSpam(self):
    self.inSpam += 1

  def incrementHam(self):
    self.inHam += 1

##### Utility functions #####

table = string.maketrans("", "")

def removePunctuation(s):
  return s.translate(table, string.punctuation)

def readDataFromFile(fn):
  inFile = open(sys.argv[1], "r")
  count = 0
  inList = []

  for line in inFile:
    count = (count + 1) % 100
    if VERBOSE and count == 0:
      sys.stdout.write(".")

    if len(line) > 3:
      inList += [ removePunctuation(line) ]

  return inList

def trainModel(trainList):
  cm = ClassModel()

  return cm

def classifySamples(cm, classifyList, checkAcc):
  classifyFile = open("predictions.txt", "w")
  accuracy = 0

  # if checkAcc is True, first word in SMS is category; return accuracy


def classifySms(sms):


##### Main function #####

def Main():

  # correct arguments?
  if len(sys.argv) < 3:
    print "Usage: %s <train file> <test file>" % sys.argv[0]
    exit()

  # setup files
  trainFile = sys.argv[1]
  testFile = sys.argv[2]

  # using test files generated by me?
  if len(sys.argv) > 3:
    if sys.argv[3] == '-t': # using my test files with labels, check accuracy
      checkAcc = True
    else:
      checkAcc = False

  # read in the training data
  if VERBOSE:
    sys.stdout.write("Reading training file")
  trainList = readDataFromFile(trainFile)
  if VERBOSE:
    print "."

  # train the model
  if VERBOSE:
    sys.stdout.write("Training model")
  cm = trainModel(trainList)
  if VERBOSE:
    print "."

  # read in the test data
  if VERBOSE:
    sys.stdout.write("Reading test file")
  testList = readDataFromFile(testFile)
  if VERBOSE:
    print "."

  # test data classification
  if VERBOSE:
    sys.stdout.write("Classifying SMS")
  accuracy = classifySamples(cm, testList, checkAcc)
  if VERBOSE:
    print "."

  # report accuracy
  if VERBOSE:
    print "Classification accuracy: %f" % accuracy


if __name__ == '__main__':
  Main()
